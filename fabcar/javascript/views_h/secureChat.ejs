<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="./fontawesome-free-6.1.1-web/css/all.min.css">
<link rel="stylesheet" href="./chat.css">
<html>

<head>
    <title>He Thong Tin Chi Dao Dieu Hanh</title>
    <%- include('./header')%>
</head>

<body onload="checkLogin()">
    <div class="chat-container">
        <div class="tab">
            <div id='hist_tab'>
                <!--button class="tablinks" >Chat History</button-->
            </div>
        </div>

        <div class="chat-box">
            <div class="loader">
                <div></div>
                <div></div>
                <div></div>
                <div></div>
            </div>
            <div class="top-bar">
                <div class="user-info">
                    <div class="avatar">
                        <i class="fa-solid fa-circle-user"></i>
                    </div>
                    <div class="name-chat" id="name-chat"></div>
                </div>

                <!--<button onclick="call()"><i class="fa-solid fa-phone bxs-phone-call"></i></button>-->
            </div>
            <div id="chat-content">
                <!-- contentchat -->
            </div>
            <div class="msger-inputarea">
                <input id='inputMess' class="msger-input" placeholder="Nhập tin nhắn" />
                <div class="msger-send-btn">
                    <label for="myFile">
                        <i class="fa-solid fa-paperclip"></i>
                    </label>
                    <input onchange="sendFile()" type="file" style="display: none;" id="myFile" name="filename">
                </div>

                <button onclick="sendMess()" id="button_send_mess" class="msger-send-btn">
                    <i class="fa-solid fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <div id="infoModal" class="modal">

        <!-- Modal content -->
        <div class="modal-content-2">
            <div class="modal-header-2">
                <span class="close" id="closeInfoModal">&times;</span>
                <h2>Trạng thái tin nhắn</h2>
            </div>
            <div class="modal-body-2" id="info-body">
            </div>
        </div>

    </div>
</body>

</html>
<script type="text/javascript" src="./jquery-3.6.0.js"></script>
<script type="text/javascript" src="./socket.io.min.js"></script>
<script>
    var myID_json = sessionStorage.getItem('login_data');
    var my_name = JSON.parse(myID_json)['my_username'];
    const nameUser = document.getElementById('name-chat');
    nameUser.innerHTML = my_name;
    const left_tab = document.getElementById('hist_tab');
    var message_zone = document.getElementById('chat-content');
    const messContent = document.getElementById('inputMess');
    // const messContainer = document.getElementById('mess_container');
    var tab_partner_prefix = 'partner_list.';



    function private_message_left_user(docType, id, name) {
        var left_private_block =
            `
        <div class="tablinks" docType=${docType} id="${tab_partner_prefix + id}"
                    onclick=choosePartner_2(this) id_sender="${id}">
                    <i class="fa-solid fa-user acc-avatar"></i>
                <div class="acc-status"  >
                    <div class="acc">${name}</div>
                </div>
                <div class="block_func_btn"  onclick=leftTabOption(this)>
                    <div class="expand-func-icon_left">
                        <i class="fa-solid fa-lock"></i>   
                    </div>
                    <div class="dropdown-button" style="display:none;">
                        <button onclick="blockchainSyncDown(this)" >BLOCKCHAIN SYNCDOWN</button>
                    </div>
                </div>
                
            </div>
            <hr class="solid">
        `
        return left_private_block
    }

    function myMessage(id_block, my_name, content, isImportant, docType, optionsObject) {
        var mess_block = `
                            <div class="outgoing messBlock" id=${id_block} docType=${docType}>
                                <div class="bubble">
                                    <div class="userName" style="font-size: 10px; font-style:italic; ">${my_name}</div>
                                    <div class="mess-content">${content}</div>
                                </div>
                                <div class="block_func_btn">
                                    <div class="expand-func-icon">
                                        <div class="dots"></div>
                                        <div class="dots"></div>
                                        <div class="dots"></div>    
                                    </div>
                                    <div class="dropdown-button">
                                        <button onclick="markImportantMess(this)" >IMPORTANT</button>
                                        <button onclick="viewDetailBlock(this)" > VIEW DETAIL</button>
                                    </div>
                                </div>
                            </div>`
        if (isImportant == 'true') {
            var text_before = `class="bubble"`;
            var postitionAdd = mess_block.search(text_before) + text_before.length;
            mess_block = [mess_block.slice(0, postitionAdd), ` style="background-color:red"`, mess_block.slice(postitionAdd)].join('');
            mess_block = mess_block.replace(`<button onclick="markImportantMess(this)" >IMPORTANT</button>`,
                `<button onclick="verifyMessBlock(this)" >VERIFY</button>`);

        }
        return mess_block;
    }
    function prtnerMessage(id_block, sender_name, content, isImportant, docType, optionsObject) {
        var mess_block = `
                            <div class="incoming messBlock" id=${id_block} docType=${docType}>
                                <div class="bubble">
                                    <div class="userName" style="font-size: 10px; font-style:italic; ">${sender_name}</div>
                                    <div class="mess-content">${content}</div>
                                </div>
                                <div class="block_func_btn" style="float:right;">
                                    <div class="expand-func-icon">
                                        <div class="dots"></div>
                                        <div class="dots"></div>
                                        <div class="dots"></div>    
                                    </div>
                                    <div class="dropdown-button">
                                        <button onclick="markImportantMess(this)" >IMPORTANT</button>
                                        <button onclick="viewDetailBlock(this)" > VIEW DETAIL</button>
                                    </div>
                                </div>
                            </div>`
        if (isImportant == 'true') {
            var text_before = `class="bubble"`;
            var postitionAdd = mess_block.search(text_before) + text_before.length;
            mess_block = [mess_block.slice(0, postitionAdd), ` style="background-color:red"`, mess_block.slice(postitionAdd)].join('');
            mess_block = mess_block.replace(`<button onclick="markImportantMess(this)" >IMPORTANT</button>`,
                `<button onclick="verifyMessBlock(this)" >VERIFY</button>`);
        }
        return mess_block
    }
    function messageFile(fileID, fileName) {
        var message =
            `
            <div class="fileName">${fileName}</div>
            <i class="fa-solid fa-download" style="cursor: pointer" onclick="downloadFile('${fileID}')" fileID="${fileID}"></i>
        `
        return message;
    };


    function leftTabOption(obj) {
        var leftTab = obj.closest('.tablinks');
        var docType = leftTab.getAttribute('docType');
        var id = leftTab.getAttribute('id_sender');
        var optionButtons = leftTab.querySelector('.dropdown-button'); console.log('optBtn', optionButtons)
        if (optionButtons.style.display == 'none') {
            optionButtons.style.display = 'block';
        }
        else if (optionButtons.style.display == 'block') {
            optionButtons.style.display == 'none';
        }

    }

    document.addEventListener('click', function (e) {
        if (!e.target.matches('.expand-func-icon_left, .fa-solid')) {
            var dropdowns = document.getElementsByClassName("dropdown-button");
            for (let i = 0; i < dropdowns.length; i++) {
                if (dropdowns[i].style.display == 'block') {
                    dropdowns[i].style.display = 'none';
                }
            }
        }
    })
    async function blockchainSyncDown(obj) {
        try {
            console.log('obj', obj);
            document.getElementsByClassName('loader')[0].style.display = 'block';
            var majorObj = obj.closest('.tablinks')
            var id_partner = majorObj.getAttribute('id_sender');
            var docType = majorObj.getAttribute('docType');
            if (docType == 'secure_private_message') {
                var api_url = '/secureChat/blockchainSyncSecurePrivateMess';
                const options = {
                    method: 'POST',
                    body: JSON.stringify({ 'receiverID': id_partner, 'docType': docType }),
                    headers: {
                        'authorization': 'token ' + accessToken,
                        'Content-Type': 'application/json'
                    }
                };
                var res = await fetch(api_url, options);
                var json_res = await res.json();
                console.log(json_res);
            }
            await choosePartner_2(majorObj);
        }
        catch (error) {
            console.log(error);
        }
        finally {
            document.getElementsByClassName('loader')[0].style.display = 'none';
        }
    }

    socket.on('secure_update_partner_publicKey', function (data) {
        console.log('new key', data);
        if (data.userID == myID) {
            var privKeyModal = document.getElementById("privKeyModal");
            privKeyModal.style.display = "block";
        }
        if (sessionStorage.getItem('partner_publicKeyRSA')) {
            var publicKey_list = JSON.parse(sessionStorage.getItem('partner_publicKeyRSA'));
            publicKey_list.forEach(element => {
                if (element.partnerID == data.userID) {
                    element.partner_publicKeyRSA = data.newPublicKey.publicKeyRSA;
                }
            });
            sessionStorage.setItem('partner_publicKeyRSA', JSON.stringify(publicKey_list));
        }


    })

    socket.on('secure_incoming_mess', function (data) {
        console.log(data);
        //console.log(document.getElementsByClassName('tablinks').length);

        var current_partner = sessionStorage.getItem('current_partner_id');
        var tablinks = document.getElementsByClassName('tablinks');
        if (data.docType == 'secure_private_message') {
            if (data.sender == current_partner) {
                var mess_block_t = secureSmartMessage(data, current_partner);
                message_zone.insertAdjacentHTML("beforeend", mess_block_t);
                message_zone.scrollTop = message_zone.scrollHeight;
                reloadLeftTab(tab_partner_prefix + data.sender);
                socket.emit('secure_seenUpdate', { 'messID': data.messID, 'docType': 'secure_private_message', 'userID': myID, 'timestamp': Date.now() })
            }
            else if (data.sender != current_partner) {
                var flag = 0;
                for (var k = 0; k < tablinks.length; k++) {
                    console.log(tablinks[k]);
                    var id = tablinks[k].getAttribute('id_sender');
                    console.log(id);
                    if (data.sender == id) {
                        flag = 1;
                    }
                }
                if (flag == 0) {
                    if (myID != data.sender) {
                        var tab_partner_el = private_message_left_user(data.docType, data.sender, data.sender_name)
                        left_tab.insertAdjacentHTML("afterbegin", tab_partner_el);
                    }
                    else if (myID == data.sender && current_partner == data.receiver) {
                        var mess_block_t = secureSmartMessage(data, current_partner);
                        message_zone.insertAdjacentHTML("beforeend", mess_block_t);
                        message_zone.scrollTop = message_zone.scrollHeight;
                        reloadLeftTab(tab_partner_prefix + data.receiver);
                    }
                }
                else if (flag == 1) {
                    if (myID != data.sender) {
                        var partner_tab = document.getElementById(tab_partner_prefix + data.sender);
                        console.log(partner_tab);
                        //partner_tab.querySelector('.dots-offline').style.backgroundColor='orange';
                        reloadLeftTab(tab_partner_prefix + data.sender);
                    }
                }

            }

        }
    })

    function reloadLeftTab(id) {

        var childLeftButton = left_tab.children;
        var index; var tab;
        for (let i = 0; i < childLeftButton.length; i++) {
            var childItem = childLeftButton[i];
            if (childItem.id == id) {
                index = i;
                tab = childItem.outerHTML + `<hr class="solid">`;
            }
        }
        left_tab.removeChild(left_tab.children[index + 1]);
        left_tab.removeChild(document.getElementById(id));
        left_tab.insertAdjacentHTML('afterbegin', tab);
    }

    function checkLogin() {
        var check = sessionStorage.getItem('login_data');
        sessionStorage.removeItem('current_partner_id');
        var check_json = JSON.parse(check);
        console.log(check_json);
        if (check_json == null || check_json.isLogin !== true) {
            sessionStorage.clear();
            window.location.replace(END_POINT + '/');
        }
        else {
            //sessionStorage.setItem('login_data', check);
            //localStorage.clear();
            fetchData();
        }
    }

    var response_init;
    async function fetchData() {
        const options = {
            method: 'POST',
            body: JSON.stringify({ 'id': parseInt(myID), 'limit': 30 }),
            headers: {
                'authorization': 'token ' + accessToken,
                'Content-Type': 'application/json'
            }
        }
        var response_init_load = await fetch("/secureChat/secure_load_chat_history", options);
        response_init = await response_init_load.json();
        response_init = response_init.sort((a, b) => b.timestamp - a.timestamp);
        var tab_partner_el;
        var room_chat = [];
        for (var i in response_init) {
            console.log(response_init[i]);
            if (response_init[i].docType == 'secure_private_message') {
                tab_partner_el = private_message_left_user(response_init[i].docType, response_init[i].userID, response_init[i].username);
            }

            left_tab.insertAdjacentHTML("beforeend", tab_partner_el);
        }
        //socket.emit('joinRoom',{'roomID':room_chat});
        //console.log(document.getElementsByClassName('tablinks').length);
    }
    async function getBlockByID(partner_id, docType) {
        //code call API get to /chat_peer
        var block;
        if (docType == 'secure_private_message') {
            //code
            var data = { 'my_ID': myID, 'partner_ID': partner_id, 'limit': 100, 'skip': 0 };
            const options = {
                method: 'POST',
                body: JSON.stringify(data),
                headers: {
                    'Content-Type': 'application/json',
                    'authorization': 'token ' + accessToken,
                }
            }
            var getPrivMessBlock = await fetch('/secureChat/secure_chat_peer', options);
            block = await getPrivMessBlock.json();
            sessionStorage.setItem('partner_publicKeyRSA',
                JSON.stringify(
                    [
                        {
                            'partnerID': sessionStorage.getItem('current_partner_id'),
                            'partner_publicKeyRSA': block.partner_publicKeyRSA
                        }
                    ]
                )
            );
        }
        return (block.chatBlocks);
    }
    async function choosePartner_2(obj) {
        // debugger;

        message_zone.innerHTML = ``;
        var id_partner = obj.getAttribute('id_sender');
        var docType = obj.getAttribute('docType');
        sessionStorage.setItem('current_partner_id', id_partner);
        var options;
        //callAPI(id)
        if (docType == 'secure_private_message') {
            id_partner = parseInt(id_partner);
            var block_ = await getBlockByID(id_partner, docType); //API call result
            var block = block_.reverse();
            var seen = [];
            for (let i = 0; i < block.length; i++) {
                var mess_block;
                if (block[i].sender == id_partner) {
                    var mess_block_t = secureSmartMessage(block[i], id_partner);
                    if (block[i].seen && block[i].seen.length == 0) {
                        seen.push(block[i].messID);
                    }
                }
                else if (block[i].sender != id_partner) {
                    var mess_block_t = secureSmartMessage(block[i], id_partner);
                }
                message_zone.insertAdjacentHTML("beforeend", mess_block_t);

            }

            options = {
                method: 'POST',
                body: JSON.stringify({ 'timestamp': Date.now(), 'seenMessID': seen, 'docType': 'secure_private_message' }),
                headers: {
                    'Content-Type': 'application/json',
                    'authorization': 'token ' + accessToken,
                }
            }
        }

        message_zone.scrollTop = message_zone.scrollHeight;
        var res = await fetch('/secureChat/secure_seenUpdate', options);
    }

    async function handleLoadedMoreMessage(block, partner_id, docType) {
        var options;
        //callAPI(id)
        if (docType == 'secure_private_message') {
            id_partner = parseInt(partner_id);
            var seen = [];
            for (let i = 0; i < block.length; i++) {
                var mess_block;
                if (block[i].sender == id_partner) {
                    var mess_block_t = secureSmartMessage(block[i], id_partner);
                    if (block[i].seen && block[i].seen.length == 0) {
                        seen.push(block[i].messID);
                    }
                }
                else if (block[i].sender != id_partner) {
                    var mess_block_t = secureSmartMessage(block[i], id_partner);
                }
                message_zone.insertAdjacentHTML("beforeend", mess_block_t);

            }

            options = {
                method: 'POST',
                body: JSON.stringify({ 'timestamp': Date.now(), 'seenMessID': seen, 'docType': 'secure_private_message' }),
                headers: {
                    'Content-Type': 'application/json',
                    'authorization': 'token ' + accessToken,
                }
            }
        }

        //message_zone.scrollTop = message_zone.scrollHeight;
        var res = await fetch('/secureChat/secure_seenUpdate', options);
    }
    //-----scroll load more-------------//
    message_zone.onscroll = async function () {
        if (message_zone.scrollTop == 0) {
            var messBlockList = message_zone.querySelectorAll('.messBlock');
            var messCount = messBlockList.length;
            var current_partner = sessionStorage.getItem('current_partner_id');
            var partner_element = document.getElementById(tab_partner_prefix + current_partner);
            var docType = partner_element.getAttribute('docType');
            if (docType == 'secure_private_message') {
                var data = { 'my_ID': myID, 'partner_ID': parseInt(current_partner), 'limit': 100, 'skip': messCount };
                const options = {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Content-Type': 'application/json',
                        'authorization': 'token ' + accessToken,
                    }
                }
                var getPrivMessBlock = await fetch('/secureChat/loadMoreSecurePrivateMess', options);
                var block = await getPrivMessBlock.json();
                await handleLoadedMoreMessage(block, current_partner, docType);
            }
        }
    }
    //-----end scroll load more-------------//

    messContent.addEventListener('keyup', function (event) {
        if (event.keyCode === 13) {
            document.getElementById('button_send_mess').click();
        }
    })

    async function markImportantMess(obj) {
        try {
            document.getElementsByClassName('loader')[0].style.display = 'block';
            //console.log(obj.parentNode.parentNode.parentNode);
            var parentObj = obj.closest('.messBlock');
            var parentObj_id = parentObj.getAttribute('id');
            var docType = parentObj.getAttribute('docType')
            var newItem = `<button onclick="verifyMessBlock(this)" >VERIFY</button>
                            <button onclick="viewDetailBlock(this)" > VIEW DETAIL</button>`
            console.log(parentObj);
            var messItem = document.getElementById(parentObj_id);
            const options = {
                method: 'POST',
                body: JSON.stringify({ 'messID': parentObj_id, 'docType': docType }),
                headers: {
                    'authorization': 'token ' + accessToken,
                    'Content-Type': 'application/json'
                }
            };
            var res_markBlockchain = await fetch('/secureChat/secure_markImportant', options); //api link
            var res_json = await res_markBlockchain.json();
            console.log(res_json);
            if (res_json.data == 'ok') {
                parentObj.querySelector('.dropdown-button').innerHTML = newItem;
                parentObj.querySelector('.bubble').style.backgroundColor = 'red';
                console.log(res_json.data)
                messItem = parentObj;
            }
            //messItem = parentObj;

        }
        catch (error) {
            alert(error);
        }
        finally {
            document.getElementsByClassName('loader')[0].style.display = 'none';
        }

    }

    async function verifyMessBlock(obj) {
        try {
            document.getElementsByClassName('loader')[0].style.display = 'block';
            var parentObj = obj.closest('.messBlock');
            //var parentObj = obj.parentElement.parentNode.parentNode;
            console.log(parentObj);
            var id_block = parentObj.getAttribute('id');
            var docType = parentObj.getAttribute('docType');
            console.log(id_block);
            const options = {
                method: 'POST',
                body: JSON.stringify({ 'messID': id_block, 'dateTime': Date.now().toString(), 'docType': docType }),
                headers: {
                    'authorization': 'token ' + accessToken,
                    'Content-Type': 'application/json'
                }
            };
            var res_block_verify = await fetch('/secureChat/secure_verifyMessBlockchain', options); //api link
            var res_block_verify_json = await res_block_verify.json();
            console.log(res_block_verify_json);
            if (res_block_verify_json.data == "error") {
                alert("du lieu da bi thay doi");
            }
            else {
                var id_block = res_block_verify_json.messID;
                var mess_block = document.getElementById(id_block);
                var message;
                if (mess_block.querySelector('.fileName')) {
                    var fileName = decryptMyMessageFile(JSON.parse(res_block_verify_json.content))['decodedFileName'];
                    var fileID = decryptMyMessageFile(JSON.parse(res_block_verify_json.content))['decodedMessage'];
                    message = messageFile(fileID, fileName);
                }
                else {
                    message = decryptMyMessage(JSON.parse(res_block_verify_json.content));
                }
                mess_block.querySelector('.userName').innerHTML = res_block_verify_json.sender_name;
                mess_block.querySelector('.mess-content').innerHTML = message;
            }

        }
        catch (error) {
            alert(error);
        }
        finally {
            document.getElementsByClassName('loader')[0].style.display = 'none';
        }

    }

    //----------Modal---------------------
    var modal = document.getElementById("infoModal");
    async function viewDetailBlock(obj) {
        try {
            var messObjID = obj.closest('.messBlock').getAttribute('id');
            var messDocType = obj.closest('.messBlock').getAttribute('docType'); console.log(messObjID, messDocType);
            var modalBody = document.getElementById('info-body');
            modalBody.innerHTML = '';
            const options = {
                method: 'GET',
                headers: {
                    'authorization': 'token ' + accessToken,
                }
            }
            var res = await fetch('/secureChat/secure_getMessInfo?messID=' + messObjID + '&docType=' + messDocType, options);
            var json_res = await res.json();
            console.log(json_res); console.log(messObjID);
            var sendTime = document.createElement('p');
            sendTime.innerHTML = 'Thoi gian gui: ' + json_res.sendTime;
            if (json_res.docType == 'secure_private_message') {
                let seenTime = document.createElement('p');
                modalBody.appendChild(sendTime);
                if (json_res.seenTime != 0) {
                    seenTime.innerHTML = 'Da xem: ' + json_res.seenTime;
                    modalBody.appendChild(seenTime);
                }
                else if (json_res.seenTime == 0) {
                    seenTime.innerHTML = 'Chua ai xem';
                    modalBody.appendChild(seenTime);
                }
            }
            // When the user clicks the button, open the modal
            modal.querySelector('.modal-header-2 >h2').innerHTML = 'MESSAGE INFORMATION';
            modal.style.display = "block";
        }
        catch (error) {
            let seenTime = document.createElement('p');
            seenTime.innerHTML = 'Tin nhan khong gui duoc hoac server dang duoc bao tri';
            modalBody.appendChild(seenTime);
            modal.style.display = "block";
        }

    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        var modal = document.getElementById("infoModal");
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
    document.getElementById('closeInfoModal').addEventListener('click', function (e) {
        modal.style.display = "none";
    })

    //----------End--------

    function sendMess() {
        var current_partner = sessionStorage.getItem('current_partner_id');
        var partner_element = document.getElementById(tab_partner_prefix + current_partner);
        var docType = partner_element.getAttribute('docType');
        var isImportant = 'false';
        if (current_partner != null && messContent.value != '') {
            if (docType == 'secure_private_message') {
                //message_zone.insertAdjacentHTML("beforeend", mess_block_t);
                message_zone.scrollTop = message_zone.scrollHeight;
                let RSAkey = deserializeRSAKey(sessionStorage.getItem('privKeyRSA'));
                let my_publicKey = cryptico.publicKeyString(RSAkey)
                var partner_publicKey = JSON.parse(sessionStorage.getItem('partner_publicKeyRSA'))[0]['partner_publicKeyRSA'];
                SecurePrivMessageTextObj(messContent.value, 'secure_private_message', myID, parseInt(current_partner), my_name,
                    my_publicKey, partner_publicKey, socket, 'secure_sendMess');
                messContent.value = '';
                reloadLeftTab(tab_partner_prefix + current_partner);
            }
        }
    }
    async function sendFile() {
        try {
            document.getElementsByClassName('loader')[0].style.display = 'block';
            const uri = "/secureChat/secure_sendFile";
            const xhr = new XMLHttpRequest();
            const fd = new FormData();
            var file = document.getElementById('myFile').files[0];
            var current_partner = sessionStorage.getItem('current_partner_id');
            var partner_element = document.getElementById(tab_partner_prefix + current_partner);
            var docType = partner_element.getAttribute('docType');

            if (current_partner && file) {
                let RSAkey = deserializeRSAKey(sessionStorage.getItem('privKeyRSA'));
                let my_publicKey = cryptico.publicKeyString(RSAkey)
                var partner_publicKey = JSON.parse(sessionStorage.getItem('partner_publicKeyRSA'))[0]['partner_publicKeyRSA'];
                if (docType == 'secure_private_message') {
                    xhr.open("POST", uri, true);
                    xhr.setRequestHeader('authorization', 'token ' + accessToken);
                    xhr.setRequestHeader('docType', docType);
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState == 4 && xhr.status == 200) {
                            console.log('res_file:', JSON.parse(xhr.responseText)); // handle response.
                            let resObj = JSON.parse(xhr.responseText);
                            if (resObj.data == 'ok') {
                                let fileID = resObj.fileID;
                                let fileName = file.name;
                                sendSecureFileMessage(fileID, fileName, docType, myID, current_partner, my_name, my_publicKey,
                                    partner_publicKey, socket, 'secure_sendMess')
                            }
                            else if (resObj.data == 'error') {
                                alert('khong the gui file');
                            }
                        }
                    };

                    console.log(file);
                    fd.append('files', file);
                    fd.append('data', 'test');
                    // Initiate a multipart/form-data upload
                    xhr.send(fd);
                    document.getElementById("myFile").value = "";
                }
            }
        }
        catch
        {
            console.log(error);
        }
        finally {
            document.getElementsByClassName('loader')[0].style.display = 'none';
        }
    }

    async function downloadFile(fileID) {

        console.log(fileID)
        const options = {
            method: 'GET',
            headers: {
                'authorization': 'token ' + accessToken,
            }
        }
        var res = await fetch('/downloadFile?fileName=' + fileID, options);
        var res_blob = await res.blob();
        console.log(res_blob)
        var url = URL.createObjectURL(res_blob);
        window.location.href = url
        //window.location.href= '/downloadFile?fileName='+fileID;
    }


    $(document).on('click', '#menu-btn', function () {
        //debugger;
        if ($('.sidebar').hasClass('active')) {
            $('.sidebar').removeClass('active');
            $('.chat-container').removeClass('scaledown');
        } else {
            $('.sidebar').addClass('active');
            $('.chat-container').addClass('scaledown');
        }
    })

    $(document).on('click', '.bx-search-alt-2', function () {
        if (!$('.sidebar').hasClass('active')) {
            $('.sidebar').addClass('active');
            $('.chat-container').addClass('scaledown');
        }
    })

    $(document).on('click', '.expand-func-icon', function () {
        console.log(this);
        // debugger;
        if ($(this).closest('.incoming, .outgoing').hasClass('active-dropdown')) {
            $(this).closest('.incoming, .outgoing').removeClass('active-dropdown');
        } else {
            $('.incoming, .outgoing').removeClass('active-dropdown');
            $(this).closest('.outgoing, .incoming').addClass('active-dropdown');
        }
    })

    document.addEventListener('click', function (e) {
        if (!e.target.matches('.expand-func-icon')) {
            var dropdowns = document.getElementsByClassName("active-dropdown");
            if (dropdowns.length > 0) {
                dropdowns[0].classList.remove("active-dropdown");
            }
        }
    })

    $(document).on('click', '.tablinks', function () {
        $('#hist_tab').find('.tablinks').removeClass('active-users')
        $(this).each(function () {
            if ($(this).hasClass('active-users')) {
                $(this).removeClass('active-users');
            } else {
                $(this).addClass('active-users');
            }
        })
    })

</script>